#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <unistd.h>
#include <sys/wait.h>
#include <fctl.h>

#define MAX_COMMAND_LENGTH 100
#define MAX_PARAMETERS 10

void type_prompt() {
    std::cout << "Shell$ ";
    std::cout.flush();
}

void read_command(std::string& command, std::vector<std::string>& parameters) {
    std::string input;
    std::getline(std::cin, input);

    size_t pos = input.find_first_of(" ");
    command = input.substr(0, pos);

    while (pos != std::string::npos) {
        size_t next_pos = input.find_first_of(" ", pos + 1);
        parameters.push_back(input.substr(pos + 1, next_pos - pos - 1));
        pos = next_pos;
    }
}

int main() {
    std::string command;
    std::vector<std::string> parameters;

    while (true) {
        type_prompt();
        read_command(command, parameters);

        if (command == "exit") {
            break;
        }

        pid_t pid = fork();
        if (pid < 0) {
            perror("fork failed");
            exit(EXIT_FAILURE);
        } else if (pid == 0) { // Child process
            // Redirection of input and output
            int fd_in = open("input.txt", O_RDONLY);
            if (fd_in != -1) {
                dup2(fd_in, STDIN_FILENO);
                close(fd_in);
            }
              int fd_out = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
            if (fd_out != -1) {
                dup2(fd_out, STDOUT_FILENO);
                close(fd_out);
            }

            // Background jobs
            if (!parameters.empty() && parameters.back() == "&") {
                parameters.pop_back(); // Remove the "&" from parameters
                setpgid(0, 0); // Put the child process in its own process group
            }

            // Convert vector of strings to array of C-style strings
            std::vector<char*> args;
            for (const auto& param : parameters) {
                args.push_back(const_cast<char*>(param.c_str()));
            }
            args.push_back(nullptr); // null-terminate the array

            // Execute command
            execvp(command.c_str(), args.data());
            perror("execvp failed");
            exit(EXIT_FAILURE);
        } else { // Parent process
            // Wait for child to exit
              int status;
            waitpid(pid, &status, 0);
        }

        // Clear parameters vector for next command
        parameters.clear();
    }

    return 0;
}
